#################################################################################################################################
# release.yml
# Created on 03/27/2025
#
# Copyright (C) 2025 Mehmet Bertan Tarakcioglu, Under the MIT License
#
# This file was originally created as part of the WatchDuck project CI Pipeline.
#################################################################################################################################

# Part of the SwiftPM-Cross-Comp-CI pipeline.

# This workflow is used to create a new release of your Swift Executable given a new version tag input.

name: Release

on:
  workflow_call:
    inputs:
      version:
        type: string
        required: true
        description: "New release tag to create (e.g. 0.4.2)"
      exec_name:
        type: string
        required: true
        description: "Executable product name built by Swfit. This may be different than the repository or Swift Package name."
      swift_toolchain_version:
        type: string
        required: true
        description: "Swift toolchain version. Should have the same Swift version as the static Linux SDK."
      linux_sdk_url:
        type: string
        required: true
        description: "Tarball URL link for the static Linux SDK. This should be the same Swift version as the toolchain version."
      linux_sdk_checksum:
        type: string
        required: true
        description: "Tarball Checksum for the static Linux SDK."
      run-swiftlint:
        type: boolean
        required: false
        default: false
        description: "If true, the workflow will run SwiftLint before building. Make sure you have the SwiftLint command tool plugin installed!"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    runs-on: macos-latest
    permissions:
      contents: write 
    env:
      REPO_URL: ${{ github.server_url }}/${{ github.repository }}
      TARGET_BRANCH: ${{ github.ref_name }}
      NEW_TAG: ${{ inputs.version }}
      EXEC_NAME: ${{ inputs.exec_name }}
      SWIFT_TOOLCHAIN_VERSION: ${{ inputs.swift_toolchain_version }}
      LINUX_SDK_URL: ${{ inputs.linux_sdk_url }}
      LINUX_SDK_CHECKSUM: ${{ inputs.linux_sdk_checksum }}
    steps:
      - name: Cloning repository.
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0
      - name: Fetch script dependencies.
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          repository: BertanT/SwiftPM-Cross-Comp-CI
          ref: main
          path: ci-scripts-${{ github.run_id }}
          sparse-checkout: '*.sh'
          sparse-checkout-cone-mode: false

      - name: Validating repository variables.
        run: ci-scripts-${{ github.run_id }}/validate-inputs-release.sh

      - name: Setting up Swift Toolchain Version ${{ env.SWIFT_TOOLCHAIN_VERSION }}.
        run: ci-scripts-${{ github.run_id }}/setup-swift.sh
      
      - name: Linting code with SwiftLint.
        if: ${{ inputs.run-swiftlint }}
        run: swift package plugin --allow-writing-to-package-directory swiftlint lint --progress

      - name: Installing the static Swift SDK for Linux.
        run: swift sdk install $LINUX_SDK_URL --checksum $LINUX_SDK_CHECKSUM
  
      - name: Building release binary for macOS ARM64.
        run: swift build --configuration release --arch arm64

      - name: Building release binary for macOS x86_64.
        run: swift build --configuration release --arch x86_64
      
      - name: Combining macOS builds into a single universal binary.
        run:  ci-scripts-${{ github.run_id }}/macos-universal-binary.sh

      - name: Building release binary for Linux ARM64.
        run: swift build --configuration release --swift-sdk aarch64-swift-linux-musl

      - name: Building release binary for Linux x86_64.
        run: swift build --configuration release --swift-sdk x86_64-swift-linux-musl

      - name: Packaging all binaries into seperate tarballs.
        run: ci-scripts-${{ github.run_id }}/pack-builds.sh

      - name: Updating the changelog and preparing release notes.
        run: ci-scripts-${{ github.run_id }}/prep-release-notes.sh

      - name: Pushing the latest changes and the new tag to the repository.
        run: ci-scripts-${{ github.run_id }}/push-release.sh

      - name: Publishing the new release.
        uses: softprops/action-gh-release@c95fe1489396fe8a9eb87c0abf8aa5b2ef267fda
        with:
          tag_name: ${{ env.NEW_TAG }}
          body_path: release-notes-${{ github.run_id }}.md
          files: .build/tarballs/*
